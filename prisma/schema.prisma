generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  email                String                 @unique
  emailVerifiedAt      DateTime?              @map("email_verified_at")
  image                String?
  role                 Role                   @default(USER)
  googleId             String?                @unique @map("google_id")
  createdAt            DateTime               @default(now()) @map("created_at")
  deletedAt            DateTime?              @map("deleted_at")
  updatedAt            DateTime?              @map("updated_at")
  credit               Int                    @default(0)
  timezone             String?
  ReservationHistories ReservationHistories[]
  Reservation          Reservation[]
  Transaction          Transaction[]

  @@map("users")
}

model Reservation {
  id                     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                 Status                @default(IDLE)
  startDate              DateTime              @map("start_date")
  endDate                DateTime              @map("end_date")
  meeting_link           String?
  createdAt              DateTime              @default(now()) @map("created_at")
  updatedAt              DateTime              @map("updated_at")
  authorId               String                @map("author_id") @db.Uuid
  studentReview          String?               @map("student_review")
  courseReview           String?               @map("course_review")
  reservationHistoriesId String?               @unique @map("reservation_histories_id") @db.Uuid
  author                 User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  update                 ReservationHistories? @relation(fields: [reservationHistoriesId], references: [id])

  @@map("reservations")
}

model ReservationHistories {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  oldStartDate DateTime     @map("old_start_date")
  oldEndDate   DateTime     @map("old_end_date")
  newStartDate DateTime     @map("new_start_date")
  newEndDate   DateTime     @map("new_end_date")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @map("updated_at")
  authorId     String       @map("author_id") @db.Uuid
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reservation  Reservation?

  @@map("reservation_histories")
}

model Transaction {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status      Status   @default(IDLE)
  packageType Package  @default(ONE_HOUR_PACK) @map("package_type")
  date        DateTime @map("date")
  amount      Float    @default(0)
  currency    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @map("updated_at")
  userId      String   @map("user_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum Role {
  USER
  ADMIN
}

enum Package {
  ONE_HOUR_PACK
  FOUR_HOURS_PACK
  TWELVE_HOURS_PACK
  TWO_PERSONS_PACK
  THREE_PERSONS_PACK
  FOUR_PERSONS_PACK
}

enum Status {
  IDLE
  PENDING
  VALIDATED
  CANCELLED
  TO_VALIDATE
  TO_CANCEL
  DONE
}
